rules_version = '2'
service cloud.firestore {
  match /databases/{database}/documents {

    function isLoggedIn() {
        return request.auth.uid != null;
    }

    function isOwner(ownerId) {
        return isLoggedIn() && request.auth.uid == ownerId;
    }

    function hasRequiredFields(requiredFields) {
        return request.resource.data.keys().hasAll(requiredFields);
    }

    function verifyUnchangedFields(fields) {
        return resource == null || !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
    }

    function verifyTimestamp(time) {
        return request.time.toMillis() - time < 5000;
    }

    function isString(field) {
        return !(field in request.resource.data) || request.resource.data[field] is string;
    }

    function isNumber(field) {
        return !(field in request.resource.data) || request.resource.data[field] is number;
    }

    function isBoolean(field) {
        return !(field in request.resource.data) || request.resource.data[field] is bool;
    }

    function validateStringSize(field, maxSize) {
        return !(field in request.resource.data)
            || (request.resource.data[field] is string && request.resource.data[field].size() < maxSize);
    }

    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
        function validateFields() {
            return validateStringSize("email", 50) && validateStringSize("username", 25) && isString("avatar");
        }

        allow read: if isLoggedIn();
        allow create: if isOwner(userId) && hasRequiredFields(["email", "username"]) && validateFields() && request.auth.token.email == request.resource.data.email;
        allow update: if isOwner(userId) && hasRequiredFields(["email", "username"]) && validateFields() && verifyUnchangedFields(["email"]);
        allow delete: if false;
    }

    match /tests/{testId} {
        function getAuthor() {
            return get(/databases/$(database)/documents/tests/$(testId)).data.author;
        }

        function validateFields() {
            return isString("author") && validateStringSize("title", 75) && isString("category") && isNumber("lastUpdated")
                && validateStringSize("description", 1000) && isString("image") && isBoolean("isPublished")
                && isNumber("pointsMax") && isNumber("questionsNum");
        }

        allow read: if isLoggedIn();
        allow create, update: if isOwner(request.resource.data.author) && hasRequiredFields(["author", "title", "category", "lastUpdated"])
            && verifyUnchangedFields(["author"]) && verifyTimestamp(request.resource.data.lastUpdated) && validateFields();
        allow delete: if isOwner(resource.data.author);

        match /private/{document=**} {
            allow read, write: if isOwner(getAuthor());
        }
    }

    match /testsPassed/{recordId} {
        function getAuthor(testId) {
            return get(/databases/$(database)/documents/tests/$(testId)).data.author;
        }

        function validateFields() {
            return isString("user") && isString("testId") && validateStringSize("title", 75) && isNumber("timeStarted")
                && isNumber("timeFinished") && isBoolean("isFinished") && isNumber("pointsMax") && isNumber("pointsEarned")
                && isString("image");
        }

        allow read: if isOwner(resource.data.user) || isOwner(getAuthor(resource.data.testId));
        allow create: if false; // cloud functions only
        allow update: if isOwner(resource.data.user) && !resource.data.isFinished
            && hasRequiredFields(["user", "testId", "title", "questions", "timeStarted", "timeFinished", "isFinished", "pointsMax"])
            && verifyUnchangedFields(["user", "testId", "title", "timeStarted", "isFinished", "pointsMax"])
            && verifyTimestamp(request.resource.data.timeFinished) && validateFields();
        allow delete: if false;

        match /private/{document=**} {
            allow read: if isOwner(getAuthor(resource.data.testId));
            allow write: if false; // cloud functions only
        }
    }
  }
}